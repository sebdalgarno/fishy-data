[
  {
    "path": "posts/2021-04-14-alfred/",
    "title": "Alfred + .Rproj",
    "description": "How to configure Alfred to search for .Rproj files",
    "author": [
      {
        "name": "Seb Dalgarno",
        "url": "https://github.com/sebdalgarno"
      }
    ],
    "date": "2021-04-14",
    "categories": [
      "Productivity",
      "RStudio"
    ],
    "contents": "\nTL;DR add dyn.ah62d4rv4ge81e6dwr7za to Preferences -> Features -> Default Results -> Advanced... panel to add .Rproj as a user-defined file type.\nOverview\nAlfred app is a productivity app (in their words) for MacOS 1 that does many many things. So far, Iâ€™ve just been using itâ€™s search functionality and am finding it quite sweet indeed (think Spotlight, but better). The use case here is that I want to avoid using my mouse to search for various Rstudio .Rproj files (i.e.Â in Finder).\nHadley is god\nI first came across this tip from Hadley Wickham in this video - so you know itâ€™s good.\nInstalling Alfred\nInstall Alfred from the website or with homebrew on the command line:\nbrew install --cask alfred\nConfiguring Alfred for .Rproj\nOpen Alfred and get into Preferences -> Features -> Default Results panel.\nAlfred1Click on Advanced... and add the following user-defined file type (by clicking +)\ndyn.ah62d4rv4ge81e6dwr7za\nAlfred1Keyboard shortcut\nI like to open Alfred with the keyboard shortcut Cmd-space instead of Spotlight. I followed the instructions here to do this.\nDone! Now open Alfred with Cmd-space and start typing in the name of a .Rproj file. Note you can add other file types for Alfred to look for (e.g.Â Scrivener projects). A final tip is that if you press space before typing the file name, Alfred will search all files.\nIf you are looking for more Mac productivity tips, check out this awesome Twitter thread\n\nSorry Windows users. But there are other apps for Windows that do similar things.â†©ï¸Ž\n",
    "preview": {},
    "last_modified": "2021-04-14T21:49:45-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-14-git-alias/",
    "title": "Git alias tricks",
    "description": "Using a git alias to commit and stage all files and other fancy tricks.",
    "author": [
      {
        "name": "Seb Dalgarno",
        "url": "https://github.com/sebdalgarno"
      }
    ],
    "date": "2021-04-14",
    "categories": [
      "Productivity",
      "RStudio"
    ],
    "contents": "\nTL;DR type git config --global alias.coa \"!git add -A && git commit -m\" in the command line. From now on, use git coa 'message here' to commit and stage all files!\nOverview\nFor years I have staged, committed and pushed changes with the RStudio Git interface.\n\nIt works! But Iâ€™ve realized that itâ€™s much more efficient (and not hard!) to do from the command line. Check out this sweet resource by Jenny Bryan for more info on git with r.\nGit from the command line\nThis solution on stackoverflow suggests staging, committing and pushing all files by running the following in the command line:\ngit add -A && git commit -m \"rebuild site\"\ngit push\n\nGit alias\nReal productivity gains are made by using git aliases, which remove the need to type (and remember) full git commands. Letâ€™s start with a simple example. To set up the alias git p for git push, we run in the command line:\ngit config --global alias.p \"push\"\nGoing back to our original use case, we can set up the alias git coa:\ngit config --global alias.coa \"!git add -A && git commit -m\"\nFrom now on, we can stage, commit and push all changes with two simple commands:\ngit coa 'rebuild site'\ngit p\nHere are some more useful aliases:\nCreate and checkout branch\ngit config --global alias.bc \"checkout -b\"\ngit bc some_new_branch\nDelete branch locally and remotely (from here)\ngit config --global alias.bd '!sh -c \"git branch -D $1 && git push origin :$1\" -'\n\ngit bd some_new_branch\nKeyboard shortcut to Terminal\nTo completely remove the need to use the mouse, Iâ€™ve set up a customized keyboard shortcut1 Cmd-3 to move the cursor to the RStudio Terminal. Check out this great tutorial on customizing keyboard shortcuts in RStudio. The advantage of using the RStudio terminal and not the MacOS Terminal app (or iterm2)2 is that it is automatically drilled down into the directory of your project.\nðŸŽ‰ðŸŽ‰ðŸŽ‰\n\nI also use Cmd-1 to move cursor to script and Cmd-2 to move cursor to console.â†©ï¸Ž\nThese tips are for Mac users. Iâ€™m not sure how to do the above in Windows.â†©ï¸Ž\n",
    "preview": {},
    "last_modified": "2021-04-14T22:41:11-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-14-github-cli/",
    "title": "GitHub from the command line",
    "description": "Some tips and tricks for interacting with GitHub from the command line.",
    "author": [
      {
        "name": "Seb Dalgarno",
        "url": "https://github.com/sebdalgarno"
      }
    ],
    "date": "2021-04-14",
    "categories": [
      "Productivity",
      "GitHub"
    ],
    "contents": "\nOverview\nNavigating around the GitHub website between various repos/issues etc. is most definitely a time waster. Iâ€™ve decided to dig into the GitHub CLI. You can install it using homebrew with brew install gh and authorize it by running gh auth login in the command line (more info in this manual). Hereâ€™s a few things I found useful.\nDealing with issues\nList issues\nOnce you are drilled down into the project directory in the command line (or simply go to Terminal in an RStudio project), type the following:\ngh issue list\n\n# Showing 3 of 3 open issues in sebdalgarno/blog\n# \n# #6  add shortcodes                     about 1 day ago\n# #5  get RSS button working             about 1 day ago\n# #2  not rendering Rmd                  about 2 days ago\nView issues\nAs Iâ€™m writing this I realize that Iâ€™ve already solved #2. Iâ€™ll view it just to make sure.\ngh issue view 2\n\n# not rendering Rmd\n# Open â€¢ sebdalgarno opened about 2 days ago â€¢ 0 comments\n# \n# \n#   blogdown problem as other themes also not working                           \n# \n# \n# View this issue on GitHub: https://github.com/sebdalgarno/blog/issues/2\nClose issues\nYes! this was solved by moving to hugodown. Iâ€™ll close it.\ngh issue close 2\n# âœ” Closed issue #2 (not rendering Rmd)\nAs an aside, I use this neat little trick to close issues automatically by adding fixes #33 to a commit message (where 33 is the issue #). gh issue list is going to be super helpful to find the issue #.\nCreate issues\nIâ€™ll create an issue to finish this post. I am being a little hard on myself here (since Iâ€™m already working on it!), but I really should finish this post.\ngh issue create --title \"Finish GitHub CLI post\" --body \"Seriously, do it.\"\n\n# Creating issue in sebdalgarno/blog\n# \n# https://github.com/sebdalgarno/blog/issues/9\nand confirm:\ngh issue list\n\n# Showing 3 of 3 open issues in sebdalgarno/blog\n#\n# #9  Finish GitHub CLI post             about 1 minute ago\n# #6  add shortcodes                     about 1 day ago\n# #5  get RSS button working             about 1 day ago\nDealing with pull requests\nCreate changes on a branch\nIâ€™m going to create a branch called â€˜fix_that_bugâ€™ and fix that bug (you know, that one). Then Iâ€™ll commit and push those changes.\ngit cb fix_that_bug\n# Switched to a new branch \"fix_that_bug\"\n\ngit coa 'fixed it'\n[fix_that_bug 35457d9] fixed it\n 1 file changed, 3 insertions(+), 1 deletion(-)\n \ngit p\n{{% admonition tip tip %}} If the above git commands look strange thatâ€™s because theyâ€™re aliases! Check out my post on git alias for details. {{% /admonition %}}\nCreate pull request and merge\nNow Iâ€™ll create a pull request with gh,\ngh pr create --title \"fixed it\" --body \"good lord that took me 35 hours\" \n\n# ? Where should we push the 'fix_that_bug' branch? sebdalgarno/blog\n#\n# Creating pull request for fix_that_bug into master in sebdalgarno/blog\n#\n# remote: \n# remote: \n# To github.com:sebdalgarno/blog.git\n#  * [new branch]      HEAD -> fix_that_bug\n# Branch 'fix_that_bug' set up to track remote branch 'fix_that_bug' from 'origin'.\n# https://github.com/sebdalgarno/blog/pull/12\ncheck the diff (Ctrl-c to quit process)\ngh pr diff 12\nmerge it,\ngh pr merge 12\n# ? What merge method would you like to use? Create a merge commit\n# ? Delete the branch locally and on GitHub? Yes\n# ? Submit? Yes\n# âœ” Merged pull request #12 (fixed it)\n# âœ” Deleted branch fix_that_bug and switched to branch master\nand pull into local master (or main) branch.\ngit pull\nThatâ€™s it for now!\nOh ya one more thing\ngh issue close 9\n# âœ” Closed issue #9 (Finish GitHub CLI post)\n{{% admonition tip tip %}} See the full list of commands and examples and some resources for setting up scripts and aliases. {{% /admonition %}}\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-14T22:44:21-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-14-movement-ecology/",
    "title": "On Nathan's movement ecology paradigm",
    "description": "A reflection on how Nathan et al.'s 2008 paper 'A movement ecology paradigm for unifying organismal movement research' might apply to the study of fish movement from acoustic telemetry.",
    "author": [
      {
        "name": "Seb Dalgarno",
        "url": "https://github.com/sebdalgarno"
      }
    ],
    "date": "2021-04-14",
    "categories": [],
    "contents": "\nThe study of animal movement has advanced a lot in recent years. Nathan suggests that advancements in animal tracking technology, environmental monitoring, and analytical methods (i.e.Â from increased computational power) have led to a general shift from the study of population redistribution (Eularian approach) to the study of individuals (Lagrangian approach). This has enabled development of more complex models (e.g.Â state-space models for individual animal movement) and increased understanding. However, Nathan suggests that a common framework is necessary to unify several paradigms for animal movement (i.e.Â biomechanical, cognitive, random, optimality) that are operating parallel to one another.\nIn this attempt to unify the study of animal movement, Nathanâ€™s paper suggests that there are four overarching questions (note Nathan is talking generally about organismal movement, but I will narrow this down a bit to animals):\n1. Why do animals move?\n2. How do animals move?\n3. When and where do animals move?\n4. What are the external factors driving animal movement?\nFollowing from this, Nathan suggests that animal movement is a function of internal state (why), motion capacity (how), navigation capacity (when and where) and external factors (abiotic and biotic). In this formulation, the motion process and navigation process are both impacted by current location, internal state (i.e.Â physiological or neurological state affecting motivation and readiness to move) and external factors. The movement propagation process is the realized movement resulting from the motion process, which is optionally affected by the navigation process.\nFramework for animal movement (Nathan et al.Â 2008)The result of this process is a lifetime movement track, which is observed by us. This track can be parsed into sub-units at various spatial and temporal scales: movement paths that represent particular phenomena such as feeding or migrating; and at even finer scales, movement steps which could correspond to a few steps and a stop. Our ability to successfully identify movement phases depends on our ability to sample an individualâ€™s movement (i.e.Â sampling frequency, duration and protocol).\nSpatiotemporal scales of sanimal movement (Nathan et al.Â 2008)This leads me to the first major challenge in the study of fish movement from acoustic telemetry arrays: limited sampling frequency and duration. Movement tracks from stationary receivers produce frequent and potentially large gaps in our knowledge of a fishes movement over time. These occur when a fish is moving or resting between receivers, or has died or emigrated outside of the receiver array.\nSpecialized statistical methods such as state-space models are required to separate the ecological state of interest from detection error. Hidden Markov Models are a class of state-space models useful for uncovering a finite number of states of interest (e.g., resident vs transitory states) with great potential for advancing the study of fish movement from acoustic telemetry by uncovering movement paths from â€˜noisyâ€™ data.\nThe utility of Nathanâ€™s framework is to force us to more comprehensively think about different drivers of fish movement and to incorporate these into our models. Typical studies of fish movement patterns are primarily interested relating the internal state (i.e., motivations for moving such as feeding or spawning) with external factors (e.g., water temperature, discharge). These fall under the â€˜optimalityâ€™ paradigm discussed by Nathan and common in landscape ecology.\nThe challenge therefore is to incorporate motion capacity and navigation capacity into our models of fish movement, thus brdiging the optimality paradigm with the biomechanical and cognitive paradigms. There is a lot potential here in the the use of Data Storage Tags to measure physiological or environmental information as a fish moves (e.g., water temperature, heart rate, muscle activity, acceleration). This would improve our understanding of the entire motion process (i.e., motion capacity in relation to internal state and external factors). We can also use our understanding of the cognitive or physiological aspects of navigation to improve our ability ot model the navigation process (i.e., navigation capacity in relation to internal state and external factors) along with the motion process.\nThrough advancements in technology (e.g., better tags, collection of physiological/environmental data as fish moves), statistical methods (e.g., state-space models), and understanding of navigation capacity of fish, there is great potential to apply Nathanâ€™s framework for a unified animal movement paradigm to the study of fish movement with acoustic telemetry.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-15T12:26:50-07:00",
    "input_file": "movement-ecology.utf8.md"
  }
]
